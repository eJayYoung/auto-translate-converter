{"version":3,"sources":["../../../lib/csv/line-buffer.js"],"names":["events","require","utils","LineBuffer","module","exports","options","EventEmitter","call","encoding","buffer","corked","queue","inherits","write","chunk","data","lines","split","pop","forEach","line","push","emit","cork","uncork","_flush","setDefaultEncoding","end"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AAEA,IAAIC,QAAQD,QAAQ,gBAAR,CAAZ;;AAGA,IAAIE,aAAaC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAClDN,SAAOO,YAAP,CAAoBC,IAApB,CAAyB,IAAzB;AACA,OAAKC,QAAL,GAAgBH,QAAQG,QAAxB;;AAEA,OAAKC,MAAL,GAAc,IAAd;;AAEA;AACA,OAAKC,MAAL,GAAc,KAAd;AACA,OAAKC,KAAL,GAAa,EAAb;AACD,CATD;;AAWAV,MAAMW,QAAN,CAAeV,UAAf,EAA2BH,OAAOO,YAAlC,EAAgD;AAC9C;AACA;AACA;;AAEAO,SAAO,eAASC,KAAT,EAAgB;AACrB;AACA;AACA,QAAIC,OAAO,KAAKN,MAAL,GAAc,KAAKA,MAAL,GAAcK,KAA5B,GAAoCA,KAA/C;AACA,QAAIE,QAAQD,KAAKE,KAAL,CAAW,QAAX,CAAZ;;AAEA;AACA,SAAKR,MAAL,GAAcO,MAAME,GAAN,EAAd;;AAEAF,UAAMG,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3B,UAAI,KAAKV,MAAT,EAAiB;AACf,aAAKC,KAAL,CAAWU,IAAX,CAAgBD,IAAhB;AACD,OAFD,MAEO;AACL,aAAKE,IAAL,CAAU,MAAV,EAAkBF,IAAlB;AACD;AACF,KAND;;AAQA,WAAO,CAAC,KAAKV,MAAb;AACD,GAvB6C;AAwB9Ca,QAAM,gBAAW;AACf,SAAKb,MAAL,GAAc,IAAd;AACD,GA1B6C;AA2B9Cc,UAAQ,kBAAW;AACjB,SAAKd,MAAL,GAAc,KAAd;AACA,SAAKe,MAAL;;AAEA;AACA,SAAKH,IAAL,CAAU,OAAV;AACD,GAjC6C;AAkC9CI,sBAAoB,8BAAW;AAC7B;AACD,GApC6C;AAqC9CC,OAAK,eAAW;AACd,QAAI,KAAKlB,MAAT,EAAiB;AACf,WAAKa,IAAL,CAAU,MAAV,EAAkB,KAAKb,MAAvB;AACA,WAAKA,MAAL,GAAc,IAAd;AACD;AACD,SAAKa,IAAL,CAAU,MAAV;AACD,GA3C6C;;AA6C9CG,UAAQ,kBAAW;AACjB,QAAI,CAAC,KAAKf,MAAV,EAAkB;AAChB,WAAKC,KAAL,CAAWQ,OAAX,CAAmB,UAASC,IAAT,EAAe;AAChC,aAAKE,IAAL,CAAU,MAAV,EAAkBF,IAAlB;AACD,OAFD;AAGA,WAAKT,KAAL,GAAa,EAAb;AACD;AACF;AApD6C,CAAhD","file":"line-buffer.js","sourcesContent":["/**\r\n * Copyright (c) 2015-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar events = require('events');\r\n\r\nvar utils = require('../utils/utils');\r\n\r\n\r\nvar LineBuffer = module.exports = function(options) {\r\n  events.EventEmitter.call(this);\r\n  this.encoding = options.encoding;\r\n\r\n  this.buffer = null;\r\n\r\n  // part of cork/uncork\r\n  this.corked = false;\r\n  this.queue = [];\r\n};\r\n\r\nutils.inherits(LineBuffer, events.EventEmitter, {\r\n  // Events:\r\n  //  line: here is a line\r\n  //  done: all lines emitted\r\n\r\n  write: function(chunk) {\r\n    // find line or lines in chunk and emit them if not corked\r\n    // or queue them if corked\r\n    var data = this.buffer ? this.buffer + chunk : chunk;\r\n    var lines = data.split(/\\r?\\n/g);\r\n\r\n    // save the last line\r\n    this.buffer = lines.pop();\r\n\r\n    lines.forEach(function(line) {\r\n      if (this.corked) {\r\n        this.queue.push(line);\r\n      } else {\r\n        this.emit('line', line);\r\n      }\r\n    });\r\n\r\n    return !this.corked;\r\n  },\r\n  cork: function() {\r\n    this.corked = true;\r\n  },\r\n  uncork: function() {\r\n    this.corked = false;\r\n    this._flush();\r\n\r\n    // tell the source I'm ready again\r\n    this.emit('drain');\r\n  },\r\n  setDefaultEncoding: function() {\r\n    // ?\r\n  },\r\n  end: function() {\r\n    if (this.buffer) {\r\n      this.emit('line', this.buffer);\r\n      this.buffer = null;\r\n    }\r\n    this.emit('done');\r\n  },\r\n\r\n  _flush: function() {\r\n    if (!this.corked) {\r\n      this.queue.forEach(function(line) {\r\n        this.emit('line', line);\r\n      });\r\n      this.queue = [];\r\n    }\r\n  }\r\n});\r\n"]}