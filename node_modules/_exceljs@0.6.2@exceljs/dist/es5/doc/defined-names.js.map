{"version":3,"sources":["../../../lib/doc/defined-names.js"],"names":["_","require","colCache","CellMatrix","Range","rangeRegexp","DefinedNames","module","exports","matrixMap","prototype","getMatrix","name","add","locStr","location","decodeEx","addEx","matrix","top","col","left","right","row","bottom","address","sheetName","n2l","addCellEx","remove","removeEx","removeCellEx","removeAllNames","each","forEach","callback","cell","getNames","addressStr","getNamesEx","map","findCellEx","filter","Boolean","_explore","mark","range","x","y","vGrow","yy","edge","c","findCellAt","hGrow","xx","cells","push","i","length","getRanges","ranges","$shortRange","model","self","definedName","value","rangeStr","test","split","pop","addCell"],"mappings":"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","file":"defined-names.js","sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('../utils/under-dash');\r\nvar colCache = require('../utils/col-cache');\r\nvar CellMatrix = require('../utils/cell-matrix');\r\nvar Range = require('./range');\r\n\r\nvar rangeRegexp = /[$](\\w+)[$](\\d+)(:[$](\\w+)[$](\\d+))?/;\r\n\r\nvar DefinedNames = module.exports = function() {\r\n  this.matrixMap = {};\r\n};\r\n\r\nDefinedNames.prototype = {\r\n  getMatrix: function(name) {\r\n    return this.matrixMap[name] || (this.matrixMap[name] = new CellMatrix());\r\n  },\r\n\r\n  // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2\r\n  add: function(locStr, name) {\r\n    var location = colCache.decodeEx(locStr);\r\n    this.addEx(location, name);\r\n  },\r\n  addEx: function(location, name) {\r\n    var matrix = this.getMatrix(name);\r\n    if (location.top) {\r\n      for (var col = location.left; col <= location.right; col++) {\r\n        for (var row = location.top; row <= location.bottom; row++) {\r\n          var address = {\r\n            sheetName: location.sheetName,\r\n            address: colCache.n2l(col) + row,\r\n            row: row,\r\n            col: col\r\n          };\r\n\r\n          matrix.addCellEx(address);\r\n        }\r\n      }\r\n    } else {\r\n      matrix.addCellEx(location);\r\n    }\r\n  },\r\n\r\n  remove: function(locStr, name) {\r\n    var location = colCache.decodeEx(locStr);\r\n    this.removeEx(location, name);\r\n  },\r\n  removeEx: function(location, name) {\r\n    var matrix = this.getMatrix(name);\r\n    matrix.removeCellEx(location);\r\n  },\r\n  removeAllNames: function(location) {\r\n    _.each(this.matrixMap, function(matrix) {\r\n      matrix.removeCellEx(location);\r\n    });\r\n  },\r\n\r\n  forEach: function(callback) {\r\n    _.each(this.matrixMap, function(matrix, name) {\r\n      matrix.forEach(function(cell) {\r\n        callback(name, cell);\r\n      });\r\n    });\r\n  },\r\n\r\n  // get all the names of a cell\r\n  getNames: function(addressStr) {\r\n    return this.getNamesEx(colCache.decodeEx(addressStr));\r\n  },\r\n  getNamesEx: function(address) {\r\n    return _.map(\r\n      this.matrixMap,\r\n      (matrix, name) => matrix.findCellEx(address) && name\r\n    ).filter(Boolean);\r\n  },\r\n\r\n  _explore: function(matrix, cell) {\r\n    cell.mark = false;\r\n    var sheetName = cell.sheetName;\r\n\r\n    var range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);\r\n    var x, y;\r\n\r\n    // grow vertical - only one col to worry about\r\n    function vGrow(yy, edge) {\r\n      var c = matrix.findCellAt(sheetName, yy, cell.col);\r\n      if (!c || !c.mark) { return false; }\r\n      range[edge] = yy;\r\n      c.mark = false;\r\n      return true;\r\n    }\r\n    for (y = cell.row - 1; vGrow(y, 'top'); y--);\r\n    for (y = cell.row + 1; vGrow(y, 'bottom'); y++);\r\n\r\n    // grow horizontal - ensure all rows can grow\r\n    function hGrow(xx, edge) {\r\n      var c, cells = [];\r\n      for (y = range.top; y <= range.bottom; y++) {\r\n        c = matrix.findCellAt(sheetName, y, xx);\r\n        if (c && c.mark) {\r\n          cells.push(c);\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      range[edge] = xx;\r\n      for (var i = 0; i < cells.length; i++) {\r\n        cells[i].mark = false;\r\n      }\r\n      return true;\r\n    }\r\n    for (x = cell.col - 1; hGrow(x, 'left'); x--);\r\n    for (x = cell.col + 1; hGrow(x, 'right'); x++);\r\n\r\n    return range;\r\n  },\r\n\r\n  getRanges: function(name, matrix) {\r\n    matrix = matrix || this.matrixMap[name];\r\n\r\n    if (!matrix) {\r\n      return { name: name, ranges: [] };\r\n    }\r\n\r\n    // mark and sweep!\r\n    matrix.forEach(function(cell) { cell.mark = true; });\r\n    var ranges = matrix.map(cell => cell.mark && this._explore(matrix, cell))\r\n      .filter(Boolean)\r\n      .map(range => range.$shortRange);\r\n\r\n    return {\r\n      name: name, ranges: ranges\r\n    };\r\n  },\r\n\r\n  get model() {\r\n    var self = this;\r\n    // To get names per cell - just iterate over all names finding cells if they exist\r\n    return _.map(this.matrixMap, function(matrix, name) {\r\n        return self.getRanges(name, matrix);\r\n      })\r\n      .filter(function(definedName) {\r\n        return definedName.ranges.length;\r\n      });\r\n  },\r\n  set model(value) {\r\n    // value is [ { name, ranges }, ... ]\r\n    var matrixMap = this.matrixMap = {};\r\n    value.forEach(function(definedName) {\r\n      var matrix = matrixMap[definedName.name] = new CellMatrix();\r\n      definedName.ranges.forEach(function(rangeStr) {\r\n        if (rangeRegexp.test(rangeStr.split('!').pop() || '')) {\r\n          matrix.addCell(rangeStr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n};\r\n"]}