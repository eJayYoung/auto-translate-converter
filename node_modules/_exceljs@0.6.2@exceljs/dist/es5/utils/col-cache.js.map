{"version":3,"sources":["../../../lib/utils/col-cache.js"],"names":["colCache","module","exports","_dictionary","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Math","floor","l2n","l","length","Error","n2l","_hash","validateAddress","value","match","decodeAddress","addr","col","colNumber","row","rowNumber","parseInt","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","sheetName","reference","startsWith","error","Object","assign","encodeAddress","encode","arguments"],"mappings":"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","file":"col-cache.js","sourcesContent":["/**\r\n * Copyright (c) 2014-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\n// =========================================================================\r\n// Column Letter to Number conversion\r\nvar colCache = module.exports = {\r\n  _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\r\n  _l2n: {},\r\n  _n2l: [],\r\n  _level: function(n) {\r\n    if (n <= 26) { return 1; }\r\n    if (n <= 26 * 26) { return 2; }\r\n    return 3;\r\n  },\r\n  _fill: function(level) {\r\n    var c, v, l1, l2, l3;\r\n    var n = 1;\r\n    if (level >= 1) {\r\n      while (n <= 26) {\r\n        c = this._dictionary[n - 1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n    if (level >= 2) {\r\n      while (n <= 26 + (26 * 26)) {\r\n        v = n - (26 + 1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26);\r\n        c = this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n    if (level >= 3) {\r\n      while (n <= 16384) {\r\n        v = n - ((26 * 26) + 26 + 1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26) % 26;\r\n        l3 = Math.floor(v / (26 * 26));\r\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n  },\r\n  l2n: function(l) {\r\n    if (!this._l2n[l]) {\r\n      this._fill(l.length);\r\n    }\r\n    if (!this._l2n[l]) {\r\n      throw new Error('Out of bounds. Invalid column letter: ' + l);\r\n    }\r\n    return this._l2n[l];\r\n  },\r\n  n2l: function(n) {\r\n    if ((n < 1) || (n > 16384)) {\r\n      throw new Error('' + n + ' is out of bounds. Excel supports columns from 1 to 16384');\r\n    }\r\n    if (!this._n2l[n]) {\r\n      this._fill(this._level(n));\r\n    }\r\n    return this._n2l[n];\r\n  },\r\n\r\n  // =========================================================================\r\n  // Address processing\r\n  _hash: {},\r\n\r\n  // check if value looks like an address\r\n  validateAddress: function(value) {\r\n    if (!value.match(/^[A-Z]+\\d+$/)) {\r\n      throw new Error('Invalid Address: ' + value);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // convert address string into structure\r\n  decodeAddress: function(value) {\r\n    var addr = this._hash[value];\r\n    if (addr) {\r\n      return addr;\r\n    }\r\n\r\n    var col = value.match(/[A-Z]+/)[0];\r\n    var colNumber = this.l2n(col);\r\n    var row = value.match(/\\d+/)[0];\r\n    var rowNumber = parseInt(row, 10);\r\n\r\n    // in case $row$col\r\n    value = col + row;\r\n\r\n    var address = {\r\n      address: value,\r\n      col: colNumber,\r\n      row: rowNumber,\r\n      $col$row: '$' + col + '$' + row\r\n    };\r\n\r\n    // mem fix - cache only the tl 100x100 square\r\n    if ((colNumber <= 100) && (rowNumber <= 100)) {\r\n      this._hash[value] = address;\r\n      this._hash[address.$col$row] = address;\r\n    }\r\n\r\n    return address;\r\n  },\r\n\r\n  // convert r,c into structure (if only 1 arg, assume r is address string)\r\n  getAddress: function(r, c) {\r\n    if (c) {\r\n      var address = this.n2l(c) + r;\r\n      return this.decodeAddress(address);\r\n    }\r\n    return this.decodeAddress(r);\r\n  },\r\n\r\n  // convert [address], [tl:br] into address structures\r\n  decode: function(value) {\r\n    var parts = value.split(':');\r\n    if (parts.length === 2) {\r\n      var tl = this.decodeAddress(parts[0]);\r\n      var br = this.decodeAddress(parts[1]);\r\n      var result = {\r\n        top: Math.min(tl.row, br.row),\r\n        left: Math.min(tl.col, br.col),\r\n        bottom: Math.max(tl.row, br.row),\r\n        right: Math.max(tl.col, br.col)\r\n      };\r\n      // reconstruct tl, br and dimensions\r\n      result.tl = this.n2l(result.left) + result.top;\r\n      result.br = this.n2l(result.right) + result.bottom;\r\n      result.dimensions = result.tl + ':' + result.br;\r\n      return result;\r\n    }\r\n    return this.decodeAddress(value);\r\n  },\r\n\r\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\r\n  decodeEx: function(value) {\r\n    var groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\r\n\r\n    var sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\r\n    var reference = groups[3]; // Remaining address\r\n\r\n    var parts = reference.split(':');\r\n    if (parts.length > 1) {\r\n      var tl = this.decodeAddress(parts[0]);\r\n      var br = this.decodeAddress(parts[1]);\r\n      var top = Math.min(tl.row, br.row);\r\n      var left = Math.min(tl.col, br.col);\r\n      var bottom = Math.max(tl.row, br.row);\r\n      var right = Math.max(tl.col, br.col);\r\n\r\n      tl = this.n2l(left) + top;\r\n      br = this.n2l(right) + bottom;\r\n\r\n      return {\r\n        top: top,\r\n        left: left,\r\n        bottom: bottom,\r\n        right: right,\r\n        sheetName: sheetName,\r\n        tl: { address: tl, col: left, row: top, $col$row: '$' + this.n2l(left) + '$' + top, sheetName: sheetName },\r\n        br: { address: br, col: right, row: bottom, $col$row: '$' + this.n2l(right) + '$' + bottom, sheetName: sheetName },\r\n        dimensions: tl + ':' + br\r\n      };\r\n    } else if (reference.startsWith('#')) {\r\n      return sheetName ? {sheetName: sheetName, error: reference} : {error: reference};\r\n    }\r\n\r\n    var address = this.decodeAddress(reference);\r\n    return sheetName ? Object.assign({sheetName: sheetName}, address) : address;\r\n  },\r\n\r\n  // convert row,col into address string\r\n  encodeAddress: function(row, col) {\r\n    return colCache.n2l(col) + row;\r\n  },\r\n\r\n  // convert row,col into string address or t,l,b,r into range\r\n  encode: function() {\r\n    switch (arguments.length) {\r\n      case 2:\r\n        return colCache.encodeAddress(arguments[0], arguments[1]);\r\n      case 4:\r\n        return colCache.encodeAddress(arguments[0], arguments[1]) + ':' + colCache.encodeAddress(arguments[2], arguments[3]);\r\n      default:\r\n        throw new Error('Can only encode with 2 or 4 arguments');\r\n    }\r\n  }\r\n};\r\n"]}