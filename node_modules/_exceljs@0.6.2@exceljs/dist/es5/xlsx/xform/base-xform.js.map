{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["Sax","require","PromishLib","XmlStream","BaseXform","module","exports","prototype","prepare","render","parseOpen","parseText","parseClose","reconcile","reset","model","map","keys","Object","i","length","mergeModel","obj","assign","parse","parser","self","Promish","resolve","reject","on","node","text","name","error","parseStream","stream","createStream","promise","pipe","xml","toXml","xmlStream"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;AACA,IAAIC,aAAaD,QAAQ,qBAAR,CAAjB;;AAEA,IAAIE,YAAYF,QAAQ,wBAAR,CAAhB;;AAEA;AACA,IAAIG,YAAYC,OAAOC,OAAP,GAAiB,YAAS,iBAAmB,CAC5D,CADD;;AAGAF,UAAUG,SAAV,GAAsB;AACpB;AACA;AACAC,WAAS,mBAAS,oBAAsB;AACtC;AACD,GALmB;AAMpBC,UAAQ,kBAAS,sBAAwB;AACvC;AACD,GARmB;AASpBC,aAAW,qBAAS,UAAY;AAC9B;AACD,GAXmB;AAYpBC,aAAW,qBAAS,UAAY;AAC9B;AACD,GAdmB;AAepBC,cAAY,sBAAS,UAAY;AAC/B;AACD,GAjBmB;AAkBpBC,aAAW,qBAAS,oBAAsB;AACxC;AACD,GApBmB;;AAsBpB;AACAC,SAAO,iBAAW;AAChB;AACA,SAAKC,KAAL,GAAa,IAAb;;AAEA;AACA,QAAI,KAAKC,GAAT,EAAc;AACZ,UAAIC,OAAOC,OAAOD,IAAP,CAAY,KAAKD,GAAjB,CAAX;AACA,WAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,aAAKH,GAAL,CAASC,KAAKE,CAAL,CAAT,EAAkBL,KAAlB;AACD;AACF;AACF,GAlCmB;AAmCpBO,cAAY,oBAASC,GAAT,EAAc;AACxB;AACA,SAAKP,KAAL,GAAaG,OAAOK,MAAP,CACX,KAAKR,KAAL,IAAc,EADH,EAEXO,GAFW,CAAb;AAID,GAzCmB;;AA2CpBE,SAAO,eAASC,MAAT,EAAiB;AACtB,QAAIC,OAAO,IAAX;AACA,WAAO,IAAIxB,WAAWyB,OAAf,CAAuB,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACtDJ,aAAOK,EAAP,CAAU,SAAV,EAAqB,UAASC,IAAT,EAAe;AAClCL,aAAKhB,SAAL,CAAeqB,IAAf;AACD,OAFD;AAGAN,aAAOK,EAAP,CAAU,MAAV,EAAkB,UAASE,IAAT,EAAe;AAC/BN,aAAKf,SAAL,CAAeqB,IAAf;AACD,OAFD;AAGAP,aAAOK,EAAP,CAAU,UAAV,EAAsB,UAASG,IAAT,EAAe;AACnC,YAAI,CAACP,KAAKd,UAAL,CAAgBqB,IAAhB,CAAL,EAA4B;AAC1BL,kBAAQF,KAAKX,KAAb;AACD;AACF,OAJD;AAKAU,aAAOK,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1BF,gBAAQF,KAAKX,KAAb;AACD,OAFD;AAGAU,aAAOK,EAAP,CAAU,OAAV,EAAmB,UAASI,KAAT,EAAgB;AACjCL,eAAOK,KAAP;AACD,OAFD;AAGD,KAlBM,CAAP;AAmBD,GAhEmB;AAiEpBC,eAAa,qBAASC,MAAT,EAAiB;AAC5B,QAAIX,SAASzB,IAAIqC,YAAJ,CAAiB,IAAjB,EAAuB,EAAvB,CAAb;AACA,QAAIC,UAAU,KAAKd,KAAL,CAAWC,MAAX,CAAd;AACAW,WAAOG,IAAP,CAAYd,MAAZ;AACA,WAAOa,OAAP;AACD,GAtEmB;;AAwEpB,MAAIE,GAAJ,GAAU;AACR;AACA;AACA,WAAO,KAAKC,KAAL,CAAW,KAAK1B,KAAhB,CAAP;AACD,GA5EmB;;AA8EpB0B,SAAO,eAAS1B,KAAT,EAAgB;AACrB,QAAI2B,YAAY,IAAIvC,SAAJ,EAAhB;AACA,SAAKM,MAAL,CAAYiC,SAAZ,EAAuB3B,KAAvB;AACA,WAAO2B,UAAUF,GAAjB;AACD;AAlFmB,CAAtB","file":"base-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2015 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar Sax = require('sax');\r\nvar PromishLib = require('../../utils/promish');\r\n\r\nvar XmlStream = require('../../utils/xml-stream');\r\n\r\n// Base class for Xforms\r\nvar BaseXform = module.exports = function(/* model, name */) {\r\n};\r\n\r\nBaseXform.prototype = {\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare: function(/* model, options */) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  },\r\n  render: function(/* xmlStream, model */) {\r\n    // convert model to xml\r\n  },\r\n  parseOpen: function(/* node */) {\r\n    // Sax Open Node event\r\n  },\r\n  parseText: function(/* node */) {\r\n    // Sax Text event\r\n  },\r\n  parseClose: function(/* name */) {\r\n    // Sax Close Node event\r\n  },\r\n  reconcile: function(/* model, options */) {\r\n    // optional post-parse step (opposite to prepare)\r\n  },\r\n  \r\n  // ============================================================\r\n  reset: function() {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = null;\r\n\r\n    // if we have a map - reset them too\r\n    if (this.map) {\r\n      var keys = Object.keys(this.map);\r\n      for (var i = 0; i < keys.length; i++) {\r\n        this.map[keys[i]].reset();\r\n      }\r\n    }\r\n  },\r\n  mergeModel: function(obj) {\r\n    // set obj's props to this.model\r\n    this.model = Object.assign(\r\n      this.model || {},\r\n      obj\r\n    );\r\n  },\r\n\r\n  parse: function(parser) {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      parser.on('opentag', function(node) {\r\n        self.parseOpen(node);\r\n      });\r\n      parser.on('text', function(text) {\r\n        self.parseText(text);\r\n      });\r\n      parser.on('closetag', function(name) {\r\n        if (!self.parseClose(name)) {\r\n          resolve(self.model);\r\n        }\r\n      });\r\n      parser.on('end', function() {\r\n        resolve(self.model);\r\n      });\r\n      parser.on('error', function(error) {\r\n        reject(error);\r\n      });\r\n    });\r\n  },\r\n  parseStream: function(stream) {\r\n    var parser = Sax.createStream(true, {});\r\n    var promise = this.parse(parser);\r\n    stream.pipe(parser);\r\n    return promise;\r\n  },\r\n  \r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  },\r\n  \r\n  toXml: function(model) {\r\n    var xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n};\r\n"]}