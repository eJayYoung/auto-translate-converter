{"version":3,"sources":["../../../../../lib/xlsx/xform/book/defined-name-xform.js"],"names":["utils","require","BaseXform","DefinedNamesXform","module","exports","inherits","render","xmlStream","model","openNode","name","localSheetId","writeText","ranges","join","closeNode","parseOpen","node","_parsedName","attributes","_parsedLocalSheetId","_parsedText","parseText","text","push","parseClose","extractRanges","undefined","parseInt","parsedText","quotesOpened","last","split","forEach","item","quotes","match","length","quotesEven"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA,IAAIE,oBAAoBC,OAAOC,OAAP,GAAiB,YAAW,CACnD,CADD;;AAGAL,MAAMM,QAAN,CAAeH,iBAAf,EAAkCD,SAAlC,EAA6C;AAC3CK,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjC;AACA;AACA;AACA;AACAD,cAAUE,QAAV,CAAmB,aAAnB,EAAkC;AAChCC,YAAMF,MAAME,IADoB;AAEhCC,oBAAcH,MAAMG;AAFY,KAAlC;AAIAJ,cAAUK,SAAV,CAAoBJ,MAAMK,MAAN,CAAaC,IAAb,CAAkB,GAAlB,CAApB;AACAP,cAAUQ,SAAV;AACD,GAZ0C;AAa3CC,aAAW,mBAASC,IAAT,EAAe;AACxB,YAAQA,KAAKP,IAAb;AACE,WAAK,aAAL;AACE,aAAKQ,WAAL,GAAmBD,KAAKE,UAAL,CAAgBT,IAAnC;AACA,aAAKU,mBAAL,GAA2BH,KAAKE,UAAL,CAAgBR,YAA3C;AACA,aAAKU,WAAL,GAAmB,EAAnB;AACA,eAAO,IAAP;AACF;AACE,eAAO,KAAP;AAPJ;AASD,GAvB0C;AAwB3CC,aAAW,mBAASC,IAAT,EAAe;AACxB,SAAKF,WAAL,CAAiBG,IAAjB,CAAsBD,IAAtB;AACD,GA1B0C;AA2B3CE,cAAY,sBAAW;AACrB,SAAKjB,KAAL,GAAa;AACXE,YAAM,KAAKQ,WADA;AAEXL,cAAQa,cAAc,KAAKL,WAAL,CAAiBP,IAAjB,CAAsB,EAAtB,CAAd;AAFG,KAAb;AAIA,QAAI,KAAKM,mBAAL,KAA6BO,SAAjC,EAA4C;AAC1C,WAAKnB,KAAL,CAAWG,YAAX,GAA0BiB,SAAS,KAAKR,mBAAd,EAAmC,EAAnC,CAA1B;AACD;AACD,WAAO,KAAP;AACD;AApC0C,CAA7C;;AAuCA,SAASM,aAAT,CAAuBG,UAAvB,EAAmC;AAClC,MAAIhB,SAAS,EAAb;AACA,MAAIiB,eAAe,KAAnB;AACA,MAAIC,OAAO,EAAX;AACAF,aAAWG,KAAX,CAAiB,GAAjB,EAAsBC,OAAtB,CAA8B,UAASC,IAAT,EAAe;AACzC,QAAI,CAACA,IAAL,EAAW;AACT;AACD;AACD,QAAIC,SAAS,CAACD,KAAKE,KAAL,CAAW,IAAX,KAAoB,EAArB,EAAyBC,MAAtC;;AAEI,QAAI,CAACF,MAAL,EAAa;AACb,UAAIL,YAAJ,EAAkB;AACdC,gBAAQG,OAAO,GAAf;AACD,OAFH,MAES;AACLrB,eAAOW,IAAP,CAAYU,IAAZ;AACD;AACH;AACD;AACH,QAAII,aAAaH,SAAS,CAAT,KAAe,CAAhC;;AAEI,QAAI,CAACL,YAAD,IAAiBQ,UAArB,EAAiC;AACjCzB,aAAOW,IAAP,CAAYU,IAAZ;AACD,KAFC,MAEK,IAAIJ,gBAAgB,CAACQ,UAArB,EAAiC;AACtCR,qBAAe,KAAf;AACAjB,aAAOW,IAAP,CAAYO,OAAOG,IAAnB;AACAH,aAAO,EAAP;AACD,KAJM,MAIA;AACLD,qBAAe,IAAf;AACAC,cAAQG,OAAO,GAAf;AACD;AACJ,GA1BH;AA2BA,SAAOrB,MAAP;AACA","file":"defined-name-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2016 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar DefinedNamesXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(DefinedNamesXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    // <definedNames>\r\n    //   <definedName name=\"name\">name.ranges.join(',')</definedName>\r\n    //   <definedName name=\"_xlnm.Print_Area\" localSheetId=\"0\">name.ranges.join(',')</definedName>\r\n    // </definedNames>\r\n    xmlStream.openNode('definedName', {\r\n      name: model.name,\r\n      localSheetId: model.localSheetId\r\n    });\r\n    xmlStream.writeText(model.ranges.join(','));\r\n    xmlStream.closeNode();\r\n  },\r\n  parseOpen: function(node) {\r\n    switch (node.name) {\r\n      case 'definedName':\r\n        this._parsedName = node.attributes.name;\r\n        this._parsedLocalSheetId = node.attributes.localSheetId;\r\n        this._parsedText = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    this._parsedText.push(text);\r\n  },\r\n  parseClose: function() {\r\n    this.model = {\r\n      name: this._parsedName,\r\n      ranges: extractRanges(this._parsedText.join(''))\r\n    };\r\n    if (this._parsedLocalSheetId !== undefined) {\r\n      this.model.localSheetId = parseInt(this._parsedLocalSheetId, 10);\r\n    }\r\n    return false;\r\n  }\r\n});\r\n\r\nfunction extractRanges(parsedText) {\r\n var ranges = [];\r\n var quotesOpened = false;\r\n var last = '';\r\n parsedText.split(',').forEach(function(item) {\r\n     if (!item) {\r\n       return;\r\n     }\r\n     var quotes = (item.match(/'/g) || []).length;\r\n\r\n         if (!quotes) {\r\n         if (quotesOpened) {\r\n             last += item + ',';\r\n           } else {\r\n             ranges.push(item);\r\n           }\r\n         return;\r\n       }\r\n     var quotesEven = quotes % 2 === 0;\r\n\r\n         if (!quotesOpened && quotesEven) {\r\n         ranges.push(item);\r\n       } else if (quotesOpened && !quotesEven) {\r\n         quotesOpened = false;\r\n         ranges.push(last + item);\r\n         last = '';\r\n       } else {\r\n         quotesOpened = true;\r\n         last += item + ',';\r\n       }\r\n   });\r\n return ranges;\r\n}\r\n"]}