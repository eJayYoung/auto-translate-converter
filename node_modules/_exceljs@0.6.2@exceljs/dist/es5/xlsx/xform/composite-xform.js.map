{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["utils","require","BaseXform","CompositeXform","module","exports","options","tag","attrs","children","map","reduce","child","name","inherits","prepare","model","forEach","xform","render","xmlStream","openNode","closeNode","parseOpen","node","parser","parseText","text","parseClose","undefined","reconcile"],"mappings":"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","file":"composite-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../utils/utils');\r\nvar BaseXform = require('./base-xform');\r\n\r\nvar CompositeXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attrs = options.attrs;\r\n  this.children = options.children;\r\n  this.map = this.children.reduce(function(map, child) {\r\n    var name = child.name || child.tag;\r\n    var tag = child.tag || child.name;\r\n    map[tag] = child;\r\n    child.name = name;\r\n    child.tag = tag;\r\n    return map;\r\n  }, {});\r\n};\r\n\r\nutils.inherits(CompositeXform, BaseXform, {\r\n  prepare: function(model, options) {\r\n    this.children.forEach(function(child) {\r\n      child.xform.prepare(model[child.tag], options);\r\n    });\r\n  },\r\n  \r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, this.attrs);\r\n    this.children.forEach(function(child) {\r\n      child.xform.render(xmlStream, model[child.name]);\r\n    });\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.xform.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {};\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.xform.parseOpen(node);\r\n          return true;\r\n        }\r\n    }\r\n    return false;\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.xform.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.xform.parseClose(name)) {\r\n        this.model[this.parser.name] = this.parser.xform.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  reconcile: function(model, options) {\r\n    this.children.forEach(function(child) {\r\n      child.xform.prepare(model[child.tag], options);\r\n    });\r\n  }\r\n});\r\n"]}