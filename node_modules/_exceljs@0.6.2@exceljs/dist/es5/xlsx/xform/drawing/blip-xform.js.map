{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/blip-xform.js"],"names":["utils","require","BaseXform","BlipXform","module","exports","inherits","tag","render","xmlStream","model","leafNode","rId","cstate","parseOpen","node","name","attributes","parseText","parseClose"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA,IAAIE,YAAYC,OAAOC,OAAP,GAAiB,YAAW,CAC3C,CADD;;AAIAL,MAAMM,QAAN,CAAeH,SAAf,EAA0BD,SAA1B,EAAqC;;AAEnC,MAAIK,GAAJ,GAAU;AAAE,WAAO,QAAP;AAAkB,GAFK;;AAInCC,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjCD,cAAUE,QAAV,CAAmB,KAAKJ,GAAxB,EAA6B;AAC3B,iBAAW,qEADgB;AAE3B,iBAAWG,MAAME,GAFU;AAG3BC,cAAQ;AAHmB,KAA7B;AAKA;AACD,GAXkC;;AAanCC,aAAW,mBAASC,IAAT,EAAe;AACxB,YAAQA,KAAKC,IAAb;AACE,WAAK,KAAKT,GAAV;AACE,aAAKG,KAAL,GAAa;AACXE,eAAKG,KAAKE,UAAL,CAAgB,SAAhB;AADM,SAAb;AAGA,eAAO,IAAP;AACF;AACE,eAAO,IAAP;AAPJ;AASD,GAvBkC;;AAyBnCC,aAAW,qBAAW,CACrB,CA1BkC;;AA4BnCC,cAAY,oBAASH,IAAT,EAAe;AACzB,YAAQA,IAAR;AACE,WAAK,KAAKT,GAAV;AACE,eAAO,KAAP;AACF;AACE;AACA,eAAO,IAAP;AALJ;AAOD;AApCkC,CAArC","file":"blip-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar BlipXform = module.exports = function() {\r\n};\r\n\r\n\r\nutils.inherits(BlipXform, BaseXform, {\r\n\r\n  get tag() { return 'a:blip'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode(this.tag, {\r\n      'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n      'r:embed': model.rId,\r\n      cstate: 'print'\r\n    });\r\n    // TODO: handle children (e.g. a:extLst=>a:ext=>a14:useLocalDpi\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          rId: node.attributes['r:embed']\r\n        };\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n\r\n  parseText: function() {\r\n  },\r\n\r\n  parseClose: function(name) {\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        // unprocessed internal nodes\r\n        return true;\r\n    }\r\n  }\r\n});\r\n"]}