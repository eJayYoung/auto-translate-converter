{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"names":["_","require","Range","colCache","Enums","Merges","module","exports","merges","prototype","add","merge","master","expandToAddress","address","range","mergeCells","map","reconcile","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","getMasterAddress","hash"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,IAAIC,QAAQ,2BAAR,CAAR;;AAEA,IAAIC,QAAQD,QAAQ,oBAAR,CAAZ;AACA,IAAIE,WAAWF,QAAQ,0BAAR,CAAf;AACA,IAAIG,QAAQH,QAAQ,oBAAR,CAAZ;;AAEA,IAAII,SAASC,OAAOC,OAAP,GAAiB,YAAW;AACvC;AACA,OAAKC,MAAL,GAAc,EAAd;AACD,CAHD;;AAKAH,OAAOI,SAAP,GAAmB;AACjBC,OAAK,aAASC,KAAT,EAAgB;AACnB;AACA,QAAI,KAAKH,MAAL,CAAYG,MAAMC,MAAlB,CAAJ,EAA+B;AAC7B,WAAKJ,MAAL,CAAYG,MAAMC,MAAlB,EAA0BC,eAA1B,CAA0CF,MAAMG,OAAhD;AACD,KAFD,MAEO;AACL,UAAIC,QAAQJ,MAAMC,MAAN,GAAe,GAAf,GAAqBD,MAAMG,OAAvC;AACA,WAAKN,MAAL,CAAYG,MAAMC,MAAlB,IAA4B,IAAIV,KAAJ,CAAUa,KAAV,CAA5B;AACD;AACF,GATgB;AAUjB,MAAIC,UAAJ,GAAiB;AACf,WAAOhB,EAAEiB,GAAF,CAAM,KAAKT,MAAX,EAAmB,UAASG,KAAT,EAAgB;AACxC,aAAOA,MAAMI,KAAb;AACD,KAFM,CAAP;AAGD,GAdgB;AAejBG,aAAW,mBAASF,UAAT,EAAqBG,IAArB,EAA2B;AACpC;AACAnB,MAAEoB,IAAF,CAAOJ,UAAP,EAAmB,UAASL,KAAT,EAAgB;AACjC,UAAIU,aAAalB,SAASmB,MAAT,CAAgBX,KAAhB,CAAjB;AACA,WAAK,IAAIY,IAAIF,WAAWG,GAAxB,EAA6BD,KAAKF,WAAWI,MAA7C,EAAqDF,GAArD,EAA0D;AACxD,YAAIG,MAAMP,KAAKI,IAAI,CAAT,CAAV;AACA,aAAK,IAAII,IAAIN,WAAWO,IAAxB,EAA8BD,KAAKN,WAAWQ,KAA9C,EAAqDF,GAArD,EAA0D;AACxD,cAAIG,OAAOJ,IAAIK,KAAJ,CAAUJ,IAAI,CAAd,CAAX;AACA,cAAI,CAACG,IAAL,EAAW;AACT;AACAJ,gBAAIK,KAAJ,CAAUJ,CAAV,IAAe;AACbK,oBAAM5B,MAAM6B,SAAN,CAAgBC,IADT;AAEbpB,uBAASX,SAASgC,aAAT,CAAuBZ,CAAvB,EAA0BI,CAA1B;AAFI,aAAf;AAID,WAND,MAMO,IAAIG,KAAKE,IAAL,KAAc5B,MAAM6B,SAAN,CAAgBG,KAAlC,EAAyC;AAC9CN,iBAAKlB,MAAL,GAAcS,WAAWgB,EAAzB;AACD;AACF;AACF;AACF,KAjBD;AAkBD,GAnCgB;AAoCjBC,oBAAkB,0BAASxB,OAAT,EAAkB;AAClC;AACA,QAAIC,QAAQ,KAAKwB,IAAL,CAAUzB,OAAV,CAAZ;AACA,WAAOC,SAASA,MAAMsB,EAAtB;AACD;AAxCgB,CAAnB","file":"merges.js","sourcesContent":["/**\r\n * Copyright (c) 2016 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\n\r\nvar Range = require('../../../doc/range');\r\nvar colCache = require('../../../utils/col-cache');\r\nvar Enums = require('../../../doc/enums');\r\n\r\nvar Merges = module.exports = function() {\r\n  // optional mergeCells is array of ranges (like the xml)\r\n  this.merges = {};\r\n};\r\n\r\nMerges.prototype = {\r\n  add: function(merge) {\r\n    // merge is {address, master}\r\n    if (this.merges[merge.master]) {\r\n      this.merges[merge.master].expandToAddress(merge.address);\r\n    } else {\r\n      var range = merge.master + ':' + merge.address;\r\n      this.merges[merge.master] = new Range(range);\r\n    }\r\n  },\r\n  get mergeCells() {\r\n    return _.map(this.merges, function(merge) {\r\n      return merge.range;\r\n    });\r\n  },\r\n  reconcile: function(mergeCells, rows) {\r\n    // reconcile merge list with merge cells\r\n    _.each(mergeCells, function(merge) {\r\n      var dimensions = colCache.decode(merge);\r\n      for (var i = dimensions.top; i <= dimensions.bottom; i++) {\r\n        var row = rows[i - 1];\r\n        for (var j = dimensions.left; j <= dimensions.right; j++) {\r\n          var cell = row.cells[j - 1];\r\n          if (!cell) {\r\n            // nulls are not included in document - so if master cell has no value - add a null one here\r\n            row.cells[j] = {\r\n              type: Enums.ValueType.Null,\r\n              address: colCache.encodeAddress(i, j)\r\n            };\r\n          } else if (cell.type === Enums.ValueType.Merge) {\r\n            cell.master = dimensions.tl;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  getMasterAddress: function(address) {\r\n    // if address has been merged, return its master's address. Assumes reconcile has been called\r\n    var range = this.hash[address];\r\n    return range && range.tl;\r\n  }\r\n};\r\n"]}