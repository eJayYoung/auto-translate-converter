{"version":3,"sources":["../../../../../lib/xlsx/xform/simple/integer-xform.js"],"names":["utils","require","BaseXform","IntegerXform","module","exports","options","tag","attr","attrs","zero","inherits","render","xmlStream","model","openNode","addAttributes","addAttribute","writeText","closeNode","parseOpen","node","name","parseInt","attributes","text","parseText","push","parseClose","join"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA,IAAIE,eAAeC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACpD,OAAKC,GAAL,GAAWD,QAAQC,GAAnB;AACA,OAAKC,IAAL,GAAYF,QAAQE,IAApB;AACA,OAAKC,KAAL,GAAaH,QAAQG,KAArB;;AAEA;AACA,OAAKC,IAAL,GAAYJ,QAAQI,IAApB;AACD,CAPD;;AASAV,MAAMW,QAAN,CAAeR,YAAf,EAA6BD,SAA7B,EAAwC;;AAEtCU,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjC;AACA,QAAIA,SAAS,KAAKJ,IAAlB,EAAwB;AACtBG,gBAAUE,QAAV,CAAmB,KAAKR,GAAxB;AACA,UAAI,KAAKE,KAAT,EAAgB;AACdI,kBAAUG,aAAV,CAAwB,KAAKP,KAA7B;AACD;AACD,UAAI,KAAKD,IAAT,EAAe;AACbK,kBAAUI,YAAV,CAAuB,KAAKT,IAA5B,EAAkCM,KAAlC;AACD,OAFD,MAEO;AACLD,kBAAUK,SAAV,CAAoBJ,KAApB;AACD;AACDD,gBAAUM,SAAV;AACD;AACF,GAhBqC;;AAkBtCC,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAIA,KAAKC,IAAL,KAAc,KAAKf,GAAvB,EAA4B;AAC1B,UAAI,KAAKC,IAAT,EAAe;AACb,aAAKM,KAAL,GAAaS,SAASF,KAAKG,UAAL,CAAgB,KAAKhB,IAArB,CAAT,EAAqC,EAArC,CAAb;AACD,OAFD,MAEO;AACL,aAAKiB,IAAL,GAAY,EAAZ;AACD;AACD,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD,GA5BqC;AA6BtCC,aAAW,mBAASD,IAAT,EAAe;AACxB,QAAI,CAAC,KAAKjB,IAAV,EAAgB;AACd,WAAKiB,IAAL,CAAUE,IAAV,CAAeF,IAAf;AACD;AACF,GAjCqC;AAkCtCG,cAAY,sBAAW;AACrB,QAAI,CAAC,KAAKpB,IAAV,EAAgB;AACd,WAAKM,KAAL,GAAaS,SAAS,KAAKE,IAAL,CAAUI,IAAV,CAAe,EAAf,KAAsB,CAA/B,EAAkC,EAAlC,CAAb;AACD;AACD,WAAO,KAAP;AACD;AAvCqC,CAAxC","file":"integer-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2015 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar IntegerXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attr = options.attr;\r\n  this.attrs = options.attrs;\r\n\r\n  // option to render zero\r\n  this.zero = options.zero;\r\n};\r\n\r\nutils.inherits(IntegerXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    // int is different to float in that zero is not rendered\r\n    if (model || this.zero) {\r\n      xmlStream.openNode(this.tag);\r\n      if (this.attrs) {\r\n        xmlStream.addAttributes(this.attrs);\r\n      }\r\n      if (this.attr) {\r\n        xmlStream.addAttribute(this.attr, model);\r\n      } else {\r\n        xmlStream.writeText(model);\r\n      }\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      if (this.attr) {\r\n        this.model = parseInt(node.attributes[this.attr], 10);\r\n      } else {\r\n        this.text = [];\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  parseText: function(text) {\r\n    if (!this.attr) {\r\n      this.text.push(text);\r\n    }\r\n  },\r\n  parseClose: function() {\r\n    if (!this.attr) {\r\n      this.model = parseInt(this.text.join('') || 0, 10);\r\n    }\r\n    return false;\r\n  }\r\n});\r\n"]}