{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/phonetic-text-xform.js"],"names":["TextXform","require","RichTextXform","utils","BaseXform","PhoneticTextXform","module","exports","map","r","t","inherits","tag","render","xmlStream","model","openNode","sb","eb","hasOwnProperty","richText","forEach","text","closeNode","parseOpen","node","name","parser","parseInt","attributes","parseText","parseClose","rt","push","undefined"],"mappings":"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","file":"phonetic-text-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2016 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar TextXform = require('./text-xform');\r\nvar RichTextXform = require('./rich-text-xform');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// <rPh sb=\"0\" eb=\"1\">\r\n//   <t>(its pronounciation in KATAKANA)</t>\r\n// </rPh>\r\n\r\nvar PhoneticTextXform = module.exports = function() {\r\n  this.map = {\r\n    r: new RichTextXform(),\r\n    t: new TextXform()\r\n  };\r\n};\r\n\r\n\r\nutils.inherits(PhoneticTextXform, BaseXform, {\r\n\r\n  get tag() { return 'rPh'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      sb: model.sb || 0,\r\n      eb: model.eb || 0\r\n    });\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      var r = this.map.r;\r\n      model.richText.forEach(function(text) {\r\n        r.render(xmlStream, text);\r\n      });\r\n    } else if (model) {\r\n      this.map.t.render(xmlStream, model.text);\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    var name = node.name;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (name === this.tag) {\r\n      this.model = {\r\n        sb: parseInt(node.attributes.sb, 10),\r\n        eb: parseInt(node.attributes.eb, 10),\r\n      };\r\n      return true;\r\n    }\r\n    this.parser = this.map[name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch (name) {\r\n          case 'r':\r\n            var rt = this.model.richText;\r\n            if (!rt) { rt = this.model.richText = []; }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          case 't':\r\n            this.model.text = this.parser.model;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n});\r\n"]}