{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/text-xform.js"],"names":["utils","require","BaseXform","TextXform","module","exports","inherits","tag","render","xmlStream","model","openNode","length","addAttribute","writeText","closeNode","_text","join","parseOpen","node","name","parseText","text","push","parseClose"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA;;AAEA,IAAIE,YAAYC,OAAOC,OAAP,GAAiB,YAAW,CAC3C,CADD;;AAGAL,MAAMM,QAAN,CAAeH,SAAf,EAA0BD,SAA1B,EAAqC;;AAEnC,MAAIK,GAAJ,GAAU;AAAE,WAAO,GAAP;AAAa,GAFU;;AAInCC,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjCD,cAAUE,QAAV,CAAmB,GAAnB;AACA,QAAKD,MAAM,CAAN,MAAa,GAAd,IAAuBA,MAAMA,MAAME,MAAN,GAAe,CAArB,MAA4B,GAAvD,EAA6D;AAC3DH,gBAAUI,YAAV,CAAuB,WAAvB,EAAoC,UAApC;AACD;AACDJ,cAAUK,SAAV,CAAoBJ,KAApB;AACAD,cAAUM,SAAV;AACD,GAXkC;;AAanC,MAAIL,KAAJ,GAAY;AACV,WAAO,KAAKM,KAAL,CAAWC,IAAX,CAAgB,EAAhB,CAAP;AACD,GAfkC;;AAiBnCC,aAAW,mBAASC,IAAT,EAAe;AACxB,YAAQA,KAAKC,IAAb;AACE,WAAK,GAAL;AACE,aAAKJ,KAAL,GAAa,EAAb;AACA,eAAO,IAAP;AACF;AACE,eAAO,KAAP;AALJ;AAOD,GAzBkC;AA0BnCK,aAAW,mBAASC,IAAT,EAAe;AACxB,SAAKN,KAAL,CAAWO,IAAX,CAAgBD,IAAhB;AACD,GA5BkC;AA6BnCE,cAAY,sBAAW;AACrB,WAAO,KAAP;AACD;AA/BkC,CAArC","file":"text-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2016 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n//   <t xml:space=\"preserve\"> is </t>\r\n\r\nvar TextXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(TextXform, BaseXform, {\r\n\r\n  get tag() { return 't'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('t');\r\n    if ((model[0] === ' ') || (model[model.length - 1] === ' ')) {\r\n      xmlStream.addAttribute('xml:space', 'preserve');\r\n    }\r\n    xmlStream.writeText(model);\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  get model() {\r\n    return this._text.join('');\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    switch (node.name) {\r\n      case 't':\r\n        this._text = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    this._text.push(text);\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n"]}