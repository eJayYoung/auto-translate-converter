{"version":3,"sources":["../../../../../lib/xlsx/xform/style/style-xform.js"],"names":["utils","require","BaseXform","AlignmentXform","StyleXform","module","exports","options","xfId","map","alignment","inherits","tag","render","xmlStream","model","openNode","numFmtId","fontId","fillId","borderId","addAttribute","closeNode","parseOpen","node","parser","name","parseInt","attributes","parseText","text","parseClose","undefined"],"mappings":"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","file":"style-xform.js","sourcesContent":["/**\r\n * Copyright (c) 2015-2017 Guyon Roche\r\n * LICENCE: MIT - please refer to LICENCE file included with this module\r\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\r\n */\r\n\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar AlignmentXform = require('./alignment-xform');\r\n\r\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\r\n//   Optional <alignment>\r\n// </xf>\r\n\r\n// Style assists translation from style model to/from xlsx\r\nvar StyleXform = module.exports = function(options) {\r\n  this.xfId = !!(options && options.xfId);\r\n  this.map = {\r\n    alignment: new AlignmentXform()\r\n  };\r\n};\r\n\r\nutils.inherits(StyleXform, BaseXform, {\r\n\r\n  get tag() { return 'xf'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('xf', {\r\n      numFmtId: model.numFmtId || 0,\r\n      fontId: model.fontId || 0,\r\n      fillId: model.fillId || 0,\r\n      borderId: model.borderId || 0\r\n    });\r\n    if (this.xfId) {\r\n      xmlStream.addAttribute('xfId', model.xfId || 0);\r\n    }\r\n\r\n    if (model.numFmtId) {\r\n      xmlStream.addAttribute('applyNumberFormat', '1');\r\n    }\r\n    if (model.fontId) {\r\n      xmlStream.addAttribute('applyFont', '1');\r\n    }\r\n    if (model.fillId) {\r\n      xmlStream.addAttribute('applyFill', '1');\r\n    }\r\n    if (model.borderId) {\r\n      xmlStream.addAttribute('applyBorder', '1');\r\n    }\r\n\r\n    if (model.alignment) {\r\n      xmlStream.addAttribute('applyAlignment', '1');\r\n      this.map.alignment.render(xmlStream, model.alignment);\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    // used during sax parsing of xml to build font object\r\n    switch (node.name) {\r\n      case 'xf':\r\n        this.model = {\r\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\r\n          fontId: parseInt(node.attributes.fontId, 10),\r\n          fillId: parseInt(node.attributes.fillId, 10),\r\n          borderId: parseInt(node.attributes.borderId, 10)\r\n        };\r\n        if (this.xfId) {\r\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\r\n        }\r\n        return true;\r\n      case 'alignment':\r\n        this.parser = this.map.alignment;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.alignment = this.parser.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return name !== 'xf';\r\n  }\r\n});\r\n"]}